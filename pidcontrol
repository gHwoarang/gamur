#include <iostream>
#include <chrono>

class PIDController {
public:
    PIDController(double Kp, double Ki, double Kd)
        : Kp(Kp), Ki(Ki), Kd(Kd), previous_error(0.0), integral(0.0) {
        last_time = std::chrono::high_resolution_clock::now();
    }

    double compute(double setpoint, double current_value) {
        // Hata hesapla
        double error = setpoint - current_value;

        // Zaman farkını al
        auto now = std::chrono::high_resolution_clock::now();
        std::chrono::duration<double> time_diff = now - last_time;
        double dt = time_diff.count();

        // Proportional terim
        double Pout = Kp * error;

        // Integral terim
        integral += error * dt;
        double Iout = Ki * integral;

        // Derivative terim
        double derivative = (error - previous_error) / dt;
        double Dout = Kd * derivative;

        // Kontrol sinyali
        double output = Pout + Iout + Dout;

        // Bir sonraki hesaplama için güncellemeler
        previous_error = error;
        last_time = now;

        return output;
    }

private:
    double Kp, Ki, Kd;  // PID katsayıları
    double previous_error;
    double integral;
    std::chrono::high_resolution_clock::time_point last_time;
};

int main() {
    // PID katsayıları
    double Kp = 0.1;
    double Ki = 0.01;
    double Kd = 0.5;

    PIDController pid(Kp, Ki, Kd);

    // Simülasyon parametreleri
    double setpoint = 100.0;  // İstenilen değer
    double current_value = 20.0;  // Başlangıç değeri

    for (int i = 0; i < 100; ++i) {
        double control_signal = pid.compute(setpoint, current_value);
        current_value += control_signal * 0.1;  // Sistem cevabı

        std::cout << "Zaman: " << i
                  << " Kontrol Sinyali: " << control_signal
                  << " Mevcut Değer: " << current_value << std::endl;
    }

    return 0;
}